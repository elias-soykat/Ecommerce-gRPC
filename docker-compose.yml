services:
  # User Service Database
  postgres-user:
    image: postgres:15-alpine
    container_name: postgres-user
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Product Service Database
  postgres-product:
    image: postgres:15-alpine
    container_name: postgres-product
    environment:
      POSTGRES_DB: product_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_product_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Order Service Database
  postgres-order:
    image: postgres:15-alpine
    container_name: postgres-order
    environment:
      POSTGRES_DB: order_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_order_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres-user
      - DB_PORT=5432
      - DB_NAME=user_db
      - DB_USER=postgres
      - DB_PASSWORD=password
      - PORT=50051
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
    ports:
      - "50051:50051"
    depends_on:
      postgres-user:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Health check passed')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Product Service
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product-service
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres-product
      - DB_PORT=5432
      - DB_NAME=product_db
      - DB_USER=postgres
      - DB_PASSWORD=password
      - PORT=50052
    ports:
      - "50052:50052"
    depends_on:
      postgres-product:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Health check passed')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres-order
      - DB_PORT=5432
      - DB_NAME=order_db
      - DB_USER=postgres
      - DB_PASSWORD=password
      - PORT=50053
      - USER_SERVICE_HOST=user-service
      - USER_SERVICE_PORT=50051
      - PRODUCT_SERVICE_HOST=product-service
      - PRODUCT_SERVICE_PORT=50052
    ports:
      - "50053:50053"
    depends_on:
      postgres-order:
        condition: service_healthy
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Health check passed')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_user_data:
    driver: local
  postgres_product_data:
    driver: local
  postgres_order_data:
    driver: local

networks:
  ecommerce-network:
    driver: bridge
